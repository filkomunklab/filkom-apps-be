// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------- global ------------------------
model Admin {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String
  password  String
  role      Role      @default(ADMIN)
  token     String?   @unique
  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Employee {
  id                        String                @id @default(uuid())
  nik                       String                @unique
  nidn                      String?               @unique
  password                  String
  firstName                 String
  lastName                  String
  email                     String                @unique
  phoneNum                  String                @unique
  Address                   String
  degree                    String?
  major                     Major?
  token                     String?               @unique
  createdBy                 String?
  updatedBy                 String?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime?
  classroom                 Classroom[]           @relation("DosenMK")
  thesis_consultation       Thesis_Consultation[] @relation("ThesisConsultation")
  proposed_advisor          Submission[]          @relation("ProposedAdvisor")
  proposed_co_advisor1      Submission[]          @relation("ProposedCoAdvisor1")
  proposed_co_advisor2      Submission[]          @relation("ProposedCoAdvisor2")
  proposal_advisor          Proposal[]            @relation("ProposalAdvisor")
  proposal_co_advisor1      Proposal[]            @relation("ProposalCoAdvisor1")
  proposal_co_advisor2      Proposal[]            @relation("ProposalCoAdvisor2")
  proposal_panelis_chairman Proposal[]            @relation("ProposalPanelistChairman")
  proposal_panelis_member   Proposal[]            @relation("ProposalPanelistMember")
  skripsi_advisor           Skripsi[]             @relation("SkripsiAdvisor")
  skripsi_co_advisor1       Skripsi[]             @relation("SkripsiCoAdvisor1")
  skripsi_co_advisor2       Skripsi[]             @relation("SkripsiCoAdvisor2")
  skripsi_panelis_chairman  Skripsi[]             @relation("SkripsiPanelistChairman")
  skripsi_panelis_member    Skripsi[]             @relation("SkripsiPanelistMember")
  proposal_assessment       Proposal_Assessment[] @relation("Dosen")
  skripsi_assessment        Skripsi_Assessment[]  @relation("Dosen")
  proposal_changes          Proposal_Changes[]    @relation("Dosen")
  skripsi_changes           Skripsi_Changes[]     @relation("Dosen")

  // supervisior            Academic_Consultation[]   @relation("supervisior")
  // reciever               Academic_Consultation[]   @relation("consultationRecivier")
  academic_consultations Academic_Consultation[]
  preRegis               PreRegistration[]
  gradesAccess           grades_access[]
  GuidanceClass          GuidanceClass?
  PreRegistrationData    PreRegistrationData[]
  Activity               Activity[]
  Rps                    Rps[]
  Curriculum             Curriculum[]

  @@unique([firstName, lastName])
  @@index([email])
}

model Student {
  id                        String                @id @default(uuid())
  reg_num                   String?               @unique
  nim                       String                @unique
  password                  String
  firstName                 String
  lastName                  String?
  dateOfBirth               DateTime?             @db.Date
  gender                    gender
  religion                  String?
  bloodType                 String?
  MaritalStatus             String?
  studentEmail              String?               @unique
  curriculum                Curriculum?           @relation(fields: [curriculumId], references: [id])
  curriculumId              String?
  arrivalYear               String?
  highSchoolGrad            String?
  address                   String?
  currentAddress            String?
  currentResidenceStatus    String?
  status                    StudentStatus         @default(ACTIVE)
  personalEmail             String?               @unique
  faculty                   String?
  major                     Major?
  MajorGlobal               MajorGlobal?          @relation(fields: [majorGlobalId], references: [id])
  majorGlobalId             String?
  graduate_year             String?
  phoneNo                   String?
  AreaOfConcentration       String?
  token                     String?               @unique
  guardianName              String?
  guardianEducation         String?
  guardianReligion          String?
  guardianStatus            String?
  familyRelation            String?
  guardianEmail             String?
  guardianPhoneNo           String?
  guardianAddress           String?
  createdBy                 String?
  updatedBy                 String?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime?
  filename                  String?
  path                      String?
  biodataCheck              Boolean               @default(false)
  proposal_student          Proposal_Student[]    @relation("ProposalStudent")
  skripsi_student           Skripsi_Student[]     @relation("SkripsiStudent")
  group_student             Group_Student[]       @relation("StudentMember")
  proposal_assessment       Proposal_Assessment[] @relation("Student")
  proposal_conclusion_value Proposal_Conclusion[] @relation("Student")
  skripsi_assessment        Skripsi_Assessment[]  @relation("Student")
  skripsi_conclusion_value  Skripsi_Conclusion[]  @relation("Student")
  FormSPT                   FormSPT[]

  academic_Consultation Academic_Consultation[]
  Tracer_Study          Tracer_Study[]
  studentGrade          transaction_Grades[]
  ActivityMember        ActivityMember[]
  GuidanceClassMember   GuidanceClassMember?
  Certificate           Certificate[]
  PreRegistrationData   PreRegistrationData[]
  StudentGrade          StudentGrade[]

  @@unique([firstName, lastName])
  @@index([studentEmail, personalEmail])
}

model MajorGlobal {
  id        String    @id
  shortName String
  name      String
  Student   Student[]
}

model UserRole {
  id        String    @id @default(uuid())
  userId    String
  role      Role      @default(MAHASISWA)
  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

//-------------------Klabat Bridge ----------------------//

enum Gender {
  MALE
  FEMALE
}

model FormSPT {
  id                String    @id @default(uuid())
  full_name         String
  reg_num           String
  date_of_birth     String
  gender            Gender
  nik               String
  nim               String
  faculty           String
  major             String
  minor             String?
  birth_mother      String
  phone_num         String
  personal_email    String
  graduate_plan     String
  remaining_credits String
  remaining_classes String
  certificateURL    String?
  approval_fac      status    @default(WAITING) // approved dan reject, default waiting
  approval_reg      status    @default(WAITING)
  created_at        DateTime  @default(now())
  updated_at        DateTime?
  student           Student   @relation(fields: [studentId], references: [nim], onDelete: Cascade)
  studentId         String
}

model Tracer_Study {
  id          String   @id @default(uuid())
  kdptimsmh   String //Kode PT --> default value dari BE
  kdpstmsmh   String //Kode Prodi --> default value dari FE
  nimhsmsmh   String //NIM
  nmmhsmsmh   String //Nama Lengkap (lastname dg firstname di Student)
  telpomsmh   String //Nomor Telepon/HP
  emailmsmh   String //alamat email
  tahun_lulus String //Tahun Lulus --> graduate_plan: Semester II 2023/2024 --> 2024gitu
  nik         String //NIK
  npwp        String //NPWP
  f8          String //Pertanyaan no.1
  f504        String? //Pertanyaan no.2
  f502        String? //Pertanyaan no. 2a
  f505        String? //Pertanyaan no.2b
  f506        String? //tidak ada di pertanyaan
  f5a1        String? //3 --> provinsi
  f5a2        String? //3 --> kabupaten/kota
  f1101       String? //4 --> pilihan
  f1102       String? //4 --> lainnya, isian
  f5b         String? //5 --> nama perusahaan
  f5c         String? //6 --> jabatan 
  f5d         String? //7 --> tingkat tempat kerja
  f18a        String? //8 --> sumber biaya
  f18b        String? //8 --> Perguruan tinggi
  f18c        String? //8 --> program study
  f18d        String? //8 --> Tanggal masuk 
  f1201       String? //9 --> pilihan
  f1202       String? //9 --> lainnya, tuliskan
  f14         String? //10
  f15         String? //11
  f1761       String? //12 a1
  f1762       String? //12 b1
  f1763       String? //12 a2
  f1764       String? //12 b2
  f1765       String? //12 a3
  f1766       String? //12 b3
  f1767       String? //12 a4
  f1768       String? //12 b4
  f1769       String? //12 a5
  f1770       String? //12 b5
  f1771       String? //12 a6
  f1772       String? //12 b6
  f1773       String? //12 a7
  f1774       String? //12 b7
  f21         String? //13 a
  f22         String? //13 b
  f23         String? //13 c
  f24         String? //13 d
  f25         String? //13 e
  f26         String? //13 f
  f27         String? //13 g
  f301        String? //14
  f302        String? //14 a
  f303        String? //14 b
  f401        String? //15a
  f402        String? //15b
  f403        String? //15c
  f404        String? //15d
  f405        String? //15e
  f406        String? //15f
  f407        String? //15g
  f408        String? //15h
  f409        String? //15i
  f410        String? //15j
  f411        String? //15k
  f412        String? //15l
  f413        String? //15m
  f414        String? //15n
  f415        String? //15o
  f416        String? //15 isian
  f6          String? //16
  f7          String? //17
  f7a         String? //18
  f1001       String? //19
  f1002       String? //19 isian
  f1601       String? //20
  f1602       String? //20
  f1603       String? //20
  f1604       String? //20
  f1605       String? //20
  f1606       String? //20
  f1607       String? //20
  f1608       String? //20
  f1609       String? //20
  f1610       String? //20
  f1611       String? //20
  f1612       String? //20
  f1613       String? //20
  f1614       String? //20 isian
  created_at  DateTime @default(now())
  studentId   String
  student     Student  @relation(fields: [studentId], references: [nim], onDelete: Cascade)
}

//-------------------Skripsi App ------------------------
model Proposal_Student {
  id           String    @id @default(uuid())
  student      Student   @relation("ProposalStudent", fields: [student_id], references: [id])
  student_id   String
  classroom    Classroom @relation("ProposalClassroom", fields: [classroom_id], references: [id])
  classroom_id String
}

model Skripsi_Student {
  id           String     @id @default(uuid())
  student      Student    @relation("SkripsiStudent", fields: [student_id], references: [id])
  student_id   String
  classroom    Classroom? @relation("SkripsiClassroom", fields: [classroom_id], references: [id])
  classroom_id String?
}

model Group_Student {
  id         String  @id @default(uuid())
  group      Group   @relation("Group", fields: [group_id], references: [id])
  group_id   String
  student    Student @relation("StudentMember", fields: [student_id], references: [id])
  student_id String
}

model Group {
  id                  String                @id @default(uuid())
  progress            Progress?
  title               String?
  keywords            String?
  abstrak             String?
  reference           String?
  submission          Submission?           @relation("Submission", fields: [submission_id], references: [id])
  submission_id       String?               @unique
  proposal            Proposal?             @relation("Proposal", fields: [proposal_id], references: [id])
  proposal_id         String?               @unique
  skripsi             Skripsi?              @relation("Skripsi", fields: [skripsi_id], references: [id])
  skripsi_id          String?               @unique
  created_at          DateTime              @default(now())
  updated_at          DateTime?
  group_student       Group_Student[]       @relation("Group")
  thesis_consultation Thesis_Consultation[] @relation("ThesisConsultation")
  History             Thesis_History[]      @relation("History")
  Link                Thesis_Link[]         @relation("Link")
}

model Academic_Calendar {
  id        String      @id @default(uuid())
  semester  Semester
  year      String
  classroom Classroom[] @relation("Academic")
}

model Classroom {
  id               String             @id @default(uuid())
  dosen_mk         Employee           @relation("DosenMK", fields: [dosen_mk_id], references: [id])
  dosen_mk_id      String
  academic         Academic_Calendar  @relation("Academic", fields: [academic_id], references: [id])
  academic_id      String
  name             Classroom_Name
  proposal_student Proposal_Student[] @relation("ProposalClassroom")
  skripsi_student  Skripsi_Student[]  @relation("SkripsiClassroom")
  submission       Submission[]       @relation("SubmissionClassroom")
  proposal         Proposal[]         @relation("ProposalClassroom")
  skripsi          Skripsi[]          @relation("SkripsiClassroom")
}

model Submission {
  id                      String             @id @default(uuid())
  file_name               String
  upload_date             DateTime
  file_size               String
  file_path               String
  is_consultation         Boolean
  proposed_advisor        Employee           @relation("ProposedAdvisor", fields: [proposed_advisor_id], references: [id])
  proposed_advisor_id     String
  proposed_co_advisor1    Employee?          @relation("ProposedCoAdvisor1", fields: [proposed_co_advisor1_id], references: [id])
  proposed_co_advisor1_id String?
  proposed_co_advisor2    Employee?          @relation("ProposedCoAdvisor2", fields: [proposed_co_advisor2_id], references: [id])
  proposed_co_advisor2_id String?
  is_approve              Submission_Approve @default(Waiting)
  classroom               Classroom          @relation("SubmissionClassroom", fields: [classroom_id], references: [id])
  classroom_id            String
  created_at              DateTime           @default(now())
  updated_at              DateTime?
  group                   Group?             @relation("Submission")
}

model Proposal {
  id                                       String                @id @default(uuid())
  file_name_proposal                       String?
  file_name_payment                        String?
  file_name_plagiarismcheck                String?
  upload_date_proposal                     DateTime?
  upload_date_payment                      DateTime?
  upload_date_plagiarismcheck              DateTime?
  file_size_proposal                       String?
  file_size_payment                        String?
  file_size_plagiarismcheck                String?
  file_path_proposal                       String?
  file_path_payment                        String?
  file_path_plagiarismcheck                String?
  advisor                                  Employee              @relation("ProposalAdvisor", fields: [advisor_id], references: [id])
  advisor_id                               String
  co_advisor1                              Employee?             @relation("ProposalCoAdvisor1", fields: [co_advisor1_id], references: [id])
  co_advisor1_id                           String?
  co_advisor2                              Employee?             @relation("ProposalCoAdvisor2", fields: [co_advisor2_id], references: [id])
  co_advisor2_id                           String?
  classroom                                Classroom             @relation("ProposalClassroom", fields: [classroom_id], references: [id])
  classroom_id                             String
  is_proposal_approve_by_advisor           Thesis_Approve?
  is_proposal_approve_by_co_advisor1       Thesis_Approve?
  is_proposal_approve_by_co_advisor2       Thesis_Approve?
  advisor_proposal_approved_date           DateTime?
  co_advisor1_proposal_approved_date       DateTime?
  co_advisor2_proposal_approved_date       DateTime?
  panelist_chairman                        Employee?             @relation("ProposalPanelistChairman", fields: [panelist_chairman_id], references: [id])
  panelist_chairman_id                     String?
  panelist_member                          Employee?             @relation("ProposalPanelistMember", fields: [panelist_member_id], references: [id])
  panelist_member_id                       String?
  start_defence                            String?
  end_defence                              String?
  defence_room                             String?
  defence_date                             String?
  is_report_open                           Boolean?
  is_report_approve_by_dekan               Boolean?
  is_report_approve_by_panelist_chairman   Boolean?
  is_report_approve_by_panelist_member     Boolean?
  is_report_approve_by_advisor             Boolean?
  dekan_report_approve_date                DateTime?
  panelist_chairman_report_approve_date    DateTime?
  panelist_member_report_approve_date      DateTime?
  advisor_report_approve_date              DateTime?
  exam_conclution                          Exam_Conclution?
  changes_conclusion                       Changes_Conclusion?
  is_pass                                  Pass?
  report_date                              String?
  file_name_revision                       String?
  upload_date_revision                     DateTime?
  file_size_revision                       String?
  file_path_revision                       String?
  is_revision_approve_by_panelist_chairman Revision_Approve?
  is_revision_approve_by_panelist_member   Revision_Approve?
  is_revision_approve_by_advisor           Revision_Approve?
  panelist_chairman_revision_approve_date  DateTime?
  panelist_member_revision_approve_date    DateTime?
  advisor_revision_approve_date            DateTime?
  panelist_chairman_revision_comment       String?
  panelist_member_revision_comment         String?
  advisor_revision_comment                 String?
  submission_dateline                      DateTime?
  completed_status                         Boolean?
  approve_date                             DateTime?
  group                                    Group?                @relation("Proposal")
  assessment                               Proposal_Assessment[] @relation("Assessment")
  changes                                  Proposal_Changes[]    @relation("Changes")
  conclusion_value                         Proposal_Conclusion[] @relation("Conclusion_Value")
}

model Skripsi {
  id                                       String               @id @default(uuid())
  file_name_skripsi                        String?
  file_name_payment                        String?
  file_name_plagiarismcheck                String?
  upload_date_skripsi                      DateTime?
  upload_date_payment                      DateTime?
  upload_date_plagiarismcheck              DateTime?
  file_size_skripsi                        String?
  file_size_payment                        String?
  file_size_plagiarismcheck                String?
  file_path_skripsi                        String?
  file_path_payment                        String?
  file_path_plagiarismcheck                String?
  advisor                                  Employee             @relation("SkripsiAdvisor", fields: [advisor_id], references: [id])
  advisor_id                               String
  co_advisor1                              Employee?            @relation("SkripsiCoAdvisor1", fields: [co_advisor1_id], references: [id])
  co_advisor1_id                           String?
  co_advisor2                              Employee?            @relation("SkripsiCoAdvisor2", fields: [co_advisor2_id], references: [id])
  co_advisor2_id                           String?
  classroom                                Classroom?           @relation("SkripsiClassroom", fields: [classroom_id], references: [id])
  classroom_id                             String?
  is_skripsi_approve_by_advisor            Thesis_Approve?
  is_skripsi_approve_by_co_advisor1        Thesis_Approve?
  is_skripsi_approve_by_co_advisor2        Thesis_Approve?
  advisor_skripsi_approved_date            DateTime?
  co_advisor1_skripsi_approved_date        DateTime?
  co_advisor2_skripsi_approved_date        DateTime?
  panelist_chairman                        Employee?            @relation("SkripsiPanelistChairman", fields: [panelist_chairman_id], references: [id])
  panelist_chairman_id                     String?
  panelist_member                          Employee?            @relation("SkripsiPanelistMember", fields: [panelist_member_id], references: [id])
  panelist_member_id                       String?
  start_defence                            String?
  end_defence                              String?
  defence_room                             String?
  defence_date                             String?
  is_report_open                           Boolean?
  is_report_approve_by_dekan               Boolean?
  is_report_approve_by_panelist_chairman   Boolean?
  is_report_approve_by_panelist_member     Boolean?
  is_report_approve_by_advisor             Boolean?
  dekan_report_approve_date                DateTime?
  panelist_chairman_report_approve_date    DateTime?
  panelist_member_report_approve_date      DateTime?
  advisor_report_approve_date              DateTime?
  exam_conclution                          Exam_Conclution?
  changes_conclusion                       Changes_Conclusion?
  is_pass                                  Pass?
  report_date                              String?
  file_name_revision                       String?
  upload_date_revision                     DateTime?
  file_size_revision                       String?
  file_path_revision                       String?
  is_revision_approve_by_panelist_chairman Revision_Approve?
  is_revision_approve_by_panelist_member   Revision_Approve?
  is_revision_approve_by_advisor           Revision_Approve?
  panelist_chairman_revision_approve_date  DateTime?
  panelist_member_revision_approve_date    DateTime?
  advisor_revision_approve_date            DateTime?
  panelist_chairman_revision_comment       String?
  panelist_member_revision_comment         String?
  advisor_revision_comment                 String?
  submission_dateline                      DateTime?
  completed_status                         Boolean?
  approve_date                             DateTime?
  file_name_hki                            String?
  file_name_journal                        String?
  file_name_sourcecode                     String?
  upload_date_hki                          DateTime?
  upload_date_journal                      DateTime?
  upload_date_sourcecode                   DateTime?
  file_size_hki                            String?
  file_size_journal                        String?
  file_size_sourcecode                     String?
  link_soucecode                           String?
  upload_date_link_soucecode               DateTime?
  file_path_hki                            String?
  file_path_journal                        String?
  file_path_sourcecode                     String?
  group                                    Group?               @relation("Skripsi")
  assessment                               Skripsi_Assessment[] @relation("Assessment")
  changes                                  Skripsi_Changes[]    @relation("Changes")
  conclusion_value                         Skripsi_Conclusion[] @relation("Conclusion_Value")
}

model Proposal_Assessment {
  id          String   @id @default(uuid())
  proposal    Proposal @relation("Assessment", fields: [proposal_id], references: [id])
  proposal_id String
  student     Student  @relation("Student", fields: [student_id], references: [id], onDelete: Cascade)
  student_id  String
  dosen       Employee @relation("Dosen", fields: [dosen_id], references: [id])
  dosen_id    String
  value       String?
}

model Skripsi_Assessment {
  id         String   @id @default(uuid())
  skripsi    Skripsi  @relation("Assessment", fields: [skripsi_id], references: [id])
  skripsi_id String
  student    Student  @relation("Student", fields: [student_id], references: [id], onDelete: Cascade)
  student_id String
  dosen      Employee @relation("Dosen", fields: [dosen_id], references: [id])
  dosen_id   String
  value      String?
}

model Proposal_Changes {
  id          String   @id @default(uuid())
  proposal    Proposal @relation("Changes", fields: [proposal_id], references: [id])
  proposal_id String
  dosen       Employee @relation("Dosen", fields: [dosen_id], references: [id])
  dosen_id    String
  judul       String?
  bab1        String?
  bab2        String?
  bab3        String?
  other       String?
}

model Skripsi_Changes {
  id         String   @id @default(uuid())
  skripsi    Skripsi  @relation("Changes", fields: [skripsi_id], references: [id])
  skripsi_id String
  dosen      Employee @relation("Dosen", fields: [dosen_id], references: [id])
  dosen_id   String
  changes    String?
  abstrak    String?
  bab1       String?
  bab2       String?
  bab3       String?
  bab4       String?
  bab5       String?
  other      String?
}

model Proposal_Conclusion {
  id                    String   @id @default(uuid())
  proposal              Proposal @relation("Conclusion_Value", fields: [proposal_id], references: [id])
  proposal_id           String
  student               Student  @relation("Student", fields: [student_id], references: [id], onDelete: Cascade)
  student_id            String
  assessment_conclution String?
}

model Skripsi_Conclusion {
  id                    String  @id @default(uuid())
  skripsi               Skripsi @relation("Conclusion_Value", fields: [skripsi_id], references: [id])
  skripsi_id            String
  student               Student @relation("Student", fields: [student_id], references: [id], onDelete: Cascade)
  student_id            String
  assessment_conclution String?
}

model Thesis_Consultation {
  id                  String              @id @default(uuid())
  group               Group               @relation("ThesisConsultation", fields: [group_id], references: [id])
  group_id            String
  description         String
  date                DateTime
  dosen               Employee            @relation("ThesisConsultation", fields: [dosen_id], references: [id])
  dosen_id            String
  consultation_status Consultation_Status
}

model Thesis_History {
  id          String   @id @default(uuid())
  user_id     String
  description String
  date        DateTime
  group       Group    @relation("History", fields: [group_id], references: [id])
  group_id    String
}

model Thesis_Link {
  id       String   @id @default(uuid())
  group    Group    @relation("Link", fields: [group_id], references: [id])
  group_id String
  name     String
  link     String
  date     DateTime
}

//-------------------Bimbingan Akademik-------------------/

// model Paralel {
//   id               String          @id @default(uuid())
//   Paralel          String
//   // Employee         Employee?       @relation(fields: [employee_Nik], references: [nik])
//   // employee_Nik     String?
//   student_Grades   student_Grades? @relation(fields: [student_GradesId], references: [id])
//   student_GradesId String?
// }

model Curriculum {
  id                   String               @id @default(uuid())
  major                String               @db.VarChar(100)
  year                 String               @db.VarChar(50)
  headOfProgramStudy   Employee             @relation(fields: [headOfProgramStudyId], references: [nik])
  headOfProgramStudyId String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  student              Student[]
  Cpl                  Cpl[]
  Curriculum_Subject   Curriculum_Subject[]

  @@unique([major, year])
}

model Subject {
  id            String      @id @default(uuid())
  code          String
  englishName   String
  indonesiaName String
  credits       Int
  type          SubjectType
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  Curriculum_Subject  Curriculum_Subject[]
  PrerequisiteSubject PrerequisiteSubject[]
  Subject_Cpl         Subject_Cpl[]
  Cpmk                Cpmk[]
  Grades              Grades[]
  ListOfRequest       ListOfRequest[]
}

model Curriculum_Subject {
  id                  String                @id @default(uuid())
  curriculum          Curriculum            @relation(fields: [curriculumId], references: [id])
  curriculumId        String
  subject             Subject               @relation(fields: [subjectId], references: [id])
  subjectId           String
  semester            Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  PrerequisiteSubject PrerequisiteSubject[]

  @@unique([curriculumId, subjectId])
}

model PrerequisiteSubject {
  targetSubject         Curriculum_Subject @relation(fields: [targetSubjectId], references: [id])
  targetSubjectId       String
  prerequisiteSubject   Subject            @relation(fields: [prerequisiteSubjectId], references: [id])
  prerequisiteSubjectId String
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  @@unique([targetSubjectId, prerequisiteSubjectId])
}

model Cpl {
  id           String        @id @default(uuid())
  code         String
  description  String
  curriculum   Curriculum    @relation(fields: [curriculumId], references: [id])
  curriculumId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Subject_Cpl  Subject_Cpl[]

  @@unique([code, curriculumId])
}

model Subject_Cpl {
  id            String          @id
  subject       Subject         @relation(fields: [subjectId], references: [id])
  subjectId     String
  cpl           Cpl             @relation(fields: [cplId], references: [id])
  cplId         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  CplListOnCpmk CplListOnCpmk[]
}

model Cpmk {
  id                 String          @id
  subject            Subject         @relation(fields: [subjectId], references: [id])
  subjectId          String
  rps                Rps             @relation(fields: [rpsId], references: [id])
  rpsId              String
  description        String
  totalGradingWeight String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  CplListOnCpmk      CplListOnCpmk[]
  CpmkGrading        CpmkGrading[]
}

model CpmkGrading {
  id            String         @id @default(uuid())
  Cpmk          Cpmk           @relation(fields: [cpmkId], references: [id])
  cpmkId        String
  gradingName   String
  gradingWeight String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  StudentGrade  StudentGrade[]
}

model StudentGrade {
  id             String      @id @default(uuid())
  rawGrade       Int
  calculateGrade Int
  Student        Student     @relation(fields: [studentNim], references: [nim])
  studentNim     String
  CpmkGrading    CpmkGrading @relation(fields: [cpmkGradingId], references: [id])
  cpmkGradingId  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model CplListOnCpmk {
  cpmk      Cpmk        @relation(fields: [cpmkId], references: [id])
  cpmkId    String
  cplList   Subject_Cpl @relation(fields: [cplListId], references: [id])
  cplListId String

  @@unique([cpmkId, cplListId])
}

model Rps {
  id                   String   @id @default(uuid())
  subjectName          String
  subjectCode          String
  subjectFamily        String
  subjectDescription   String
  subjectCredit        Int
  subjectWeight        Int
  parallel             String   @db.Char(1)
  semester             Int
  schedule             String
  rpsDeveloper         String
  headOfExpertise      String
  headOfProgramStudy   String
  mainReferences       String[]
  supportingReferences String[]
  software             String
  hadware              String
  teamTeaching         String[]
  minPassStudents      String
  minPassGrade         String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  teacher               Employee                @relation(fields: [teacherId], references: [nik])
  teacherId             String
  cpmk                  Cpmk[]
  SubjectReqForRps      SubjectReqForRps[]
  MeetingPlan           MeetingPlan[]
  StudentAssignmentPlan StudentAssignmentPlan[]
}

model MeetingPlan {
  id                    String   @id @default(uuid())
  week                  String
  cpmkList              String[]
  subCpmkDescription    String
  achievementIndicators String
  assessmentModel       String
  material              String
  method                String
  offlineActivity       String
  onlineActivity        String
  rps                   Rps      @relation(fields: [rpsId], references: [id])
  rpsId                 String
}

model StudentAssignmentPlan {
  id                    String   @id @default(uuid())
  title                 String
  assignmentModel       String
  referances            String[]
  subLearningOutcomes   String
  assignmentDescription String
  icbValuation          String
  dueSchedule           String
  others                String
  referenceList         String
  rps                   Rps      @relation(fields: [rpsId], references: [id])
  rpsId                 String
}

model SubjectReqForRps {
  Rps           Rps    @relation(fields: [rpsId], references: [id])
  rpsId         String
  subjectName   String
  subjectCredit Int
  subjectCode   String

  @@unique([rpsId, subjectCode])
}

// =================== OBE END ===================

model transaction_Grades {
  id           String    @id @default(uuid())
  submitedDate DateTime  @default(now()) @db.Timestamptz(3)
  approveDate  DateTime? @db.Timestamptz(3)
  semester     String
  comments     String?
  status       status    @default(WAITING)
  Student      Student?  @relation(fields: [student_Nim], references: [nim])
  student_Nim  String
  Grades       Grades[]
}

model Grades {
  id                 String              @id @default(uuid())
  grades             String?
  lecturer           String
  description        String?
  submited_Date      DateTime            @default(now())
  Subject            Subject?            @relation(fields: [subjectId], references: [id])
  subjectId          String?
  subjectName        String?
  transaction_Grades transaction_Grades? @relation(fields: [transactionId], references: [id])
  transactionId      String?
}

model grades_access {
  id              String    @id @default(uuid())
  semester        String?
  semester_period String?
  major           Major
  due_date        DateTime
  createdAt       DateTime  @default(now())
  isOpen          Boolean   @default(true)
  Employee        Employee? @relation(fields: [employeeNik], references: [nik])
  employeeNik     String?
}

model PreRegistration {
  id                  String                @id @default(uuid())
  semester            Semester
  semesterPeriod      String
  major               Major
  dueDate             DateTime
  isOpen              Boolean               @default(true)
  Employee            Employee              @relation(fields: [employeeNik], references: [nik])
  employeeNik         String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  PreRegistrationData PreRegistrationData[]
}

model PreRegistrationData {
  id                String          @id @default(uuid())
  Student           Student         @relation(fields: [studentId], references: [nim])
  studentId         String
  Employee          Employee        @relation(fields: [employeeId], references: [nik])
  employeeId        String
  status            status?         @default(WAITING)
  description       String?
  comments          String?
  submitDate        DateTime        @default(now())
  approveDate       DateTime?
  PreRegistration   PreRegistration @relation(fields: [preRegistrationId], references: [id])
  preRegistrationId String
  ListOfRequest     ListOfRequest[]

  @@unique([preRegistrationId, studentId])
}

model ListOfRequest {
  PreRegistrationData   PreRegistrationData @relation(fields: [preRegistrationDataId], references: [id])
  preRegistrationDataId String
  subject               Subject             @relation(fields: [subjectId], references: [id])
  subjectId             String

  @@unique([preRegistrationDataId, subjectId])
}

model Academic_Consultation {
  id String @id @default(uuid())

  student     Student @relation(fields: [student_nim], references: [nim])
  student_nim String

  receiver     Employee @relation(fields: [receiver_nik], references: [nik])
  receiver_nik String

  receiver_name        String             @db.VarChar(255)
  topic                String             @db.VarChar(50)
  student_name         String             @db.VarChar(255)
  supervisor_name      String             @db.VarChar(255)
  student_major        String             @db.VarChar(50)
  student_arrival_year String             @db.VarChar(50)
  createdAt            DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime           @default(now()) @db.Timestamptz(3)
  status               ConsultationStatus @default(Waiting)
  description          String

  messages Message[]
}

model Message {
  id String @id @default(uuid())

  academic_consultation    Academic_Consultation @relation(fields: [academic_consultation_id], references: [id])
  academic_consultation_id String

  sender_name String   @db.VarChar(255)
  content     String
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
}

model Certificate {
  id              String    @id @default(uuid())
  filename        String
  path            String
  title           String
  category        String
  description     String
  comments        String?
  approvalDate    DateTime? @db.Timestamptz(3)
  submitDate      DateTime  @default(now()) @db.Timestamptz(3)
  approval_status status    @default(WAITING)
  student         Student   @relation(fields: [studentNim], references: [nim])
  studentNim      String
}

model Activity {
  id             String           @id @default(uuid())
  title          String
  description    String
  dueDate        DateTime
  isAttendance   Boolean
  activityType   ActivityType
  Employee       Employee         @relation(fields: [employeeNik], references: [nik])
  employeeNik    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ActivityMember ActivityMember[]
}

model ActivityMember {
  presence   Boolean?
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String
  student    Student  @relation(fields: [studentNim], references: [nim])
  studentNim String

  @@unique([activityId, studentNim])
}

model GuidanceClass {
  id                  String                @id @default(uuid())
  teacher             Employee              @relation(fields: [teacherId], references: [nik])
  teacherId           String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  GuidanceClassMember GuidanceClassMember[]
}

model GuidanceClassMember {
  student         Student       @relation(fields: [studentNim], references: [nim])
  studentNim      String        @unique
  gudianceClass   GuidanceClass @relation(fields: [guidanceClassId], references: [id], onDelete: Cascade)
  guidanceClassId String

  @@unique([studentNim, guidanceClassId])
}

enum Major {
  SI
  IF
  DKV
  NONE
}

enum StudentStatus {
  GRADUATE
  ACTIVE
  INACTIVE
}

enum gender {
  MALE
  FEMALE
}

enum Thesis_Approve {
  Waiting
  Approve
  Rejected
}

enum Submission_Approve {
  Waiting
  Approve
  Rejected
}

enum Classroom_Name {
  Proposal
  Skripsi
}

enum Semester {
  Ganjil
  Genap
  Padat
}

enum Progress {
  Submission
  Proposal
  Skripsi
  Finished
}

enum Consultation_Status {
  Proposal
  Skripsi
}

enum status {
  WAITING
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  SUPER_ADMIN
  MAHASISWA
  ADMIN_LPMI
  OPERATOR_LPMI
  ALUMNI
  DEKAN
  KAPRODI
  DOSEN
  DOSEN_MK
  OPERATOR_FAKULTAS
  SEKRETARIS
  REGISTER
}

enum Exam_Conclution {
  Rejected
  Approve
}

enum Changes_Conclusion {
  Major
  Minor
}

enum Pass {
  Pass
  Fail
  Repeat
}

enum Revision_Approve {
  Waiting
  Approve
  Rejected
}

enum ConsultationStatus {
  Waiting
  OnProcess
  Complete
}

enum ActivityType {
  GUIDANCE_CLASS
  MAJOR
  FACULTY
}

enum SubjectType {
  Prerequisite
  Major
  General
  Basic
  Elective
}
