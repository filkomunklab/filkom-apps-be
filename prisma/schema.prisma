// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------- global ------------------------
model Admin {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String
  password  String
  role      Role      @default(ADMIN)
  token     String?   @unique
  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Employee {
  id                        String                @id @default(uuid())
  nik                       String                @unique
  nidn                      String?               @unique
  password                  String
  firstName                 String
  lastName                  String
  email                     String                @unique
  phoneNum                  String                @unique
  Address                   String
  degree                    String?
  major                     Major?
  token                     String?               @unique
  createdBy                 String?
  updatedBy                 String?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime?
  classroom                 Classroom[]           @relation("DosenMK")
  consultation              Consultaion[]         @relation("Consultation")
  proposed_advisor          Submission[]          @relation("ProposedAdvisor")
  proposed_co_advisor1      Submission[]          @relation("ProposedCoAdvisor1")
  proposed_co_advisor2      Submission[]          @relation("ProposedCoAdvisor2")
  proposal_advisor          Proposal[]            @relation("ProposalAdvisor")
  proposal_co_advisor1      Proposal[]            @relation("ProposalCoAdvisor1")
  proposal_co_advisor2      Proposal[]            @relation("ProposalCoAdvisor2")
  proposal_panelis_chairman Proposal[]            @relation("ProposalPanelistChairman")
  proposal_panelis_member   Proposal[]            @relation("ProposalPanelistMember")
  skripsi_advisor           Skripsi[]             @relation("SkripsiAdvisor")
  skripsi_co_advisor1       Skripsi[]             @relation("SkripsiCoAdvisor1")
  skripsi_co_advisor2       Skripsi[]             @relation("SkripsiCoAdvisor2")
  skripsi_panelis_chairman  Skripsi[]             @relation("SkripsiPanelistChairman")
  skripsi_panelis_member    Skripsi[]             @relation("SkripsiPanelistMember")
  proposal_assessment       Proposal_Assessment[] @relation("Dosen")
  skripsi_assessment        Skripsi_Assessment[]  @relation("Dosen")
  proposal_changes          Proposal_Changes[]    @relation("Dosen")
  skripsi_changes           Skripsi_Changes[]     @relation("Dosen")

  supervisior Consultation[]    @relation("supervisior")
  reciever    Consultation[]    @relation("consultationRecivier")
  preRegis    PreRegistration[]
  transaction Transaction[]
  message     Message[]
  student     Student[]

  @@unique([firstName, lastName])
  @@index([email])
}

model Student {
  id             String    @id @default(uuid())
  reg_num        String?   @unique
  nim            String    @unique
  password       String
  firstName      String
  lastName       String?
  dateOfBirth    DateTime?
  gender         gender
  religion       String?
  bloodType      String?
  marriageStatus String?
  studentEmail   String?   @unique
  curriculum     String?
  highSchoolGrad String?

  currentAdresss      String?
  status              StudentStatus         @default(ACTIVE)
  personalEmail       String?               @unique
  faculty             String?
  major               Major?
  address             String?
  email               String?               @unique
  phoneNo             String?
  token               String?               @unique
  createdBy           String?
  updatedBy           String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?
  thesis_student      Thesis_Student?       @relation("ThesisStudent")
  group_student       Group_Student[]       @relation("StudentMember")
  proposal_assessment Proposal_Assessment[] @relation("Student")
  skripsi_assessment  Skripsi_Assessment[]  @relation("Student")
  FormSPT             FormSPT[]

  consultation      Consultation[]
  preRegis          PreRegistration[]
  transaction       Transaction[]
  message           Message[]
  Employee          Employee?         @relation(fields: [employeeId], references: [id])
  employeeId        String?
  StudentGuardian   StudentGuardian?  @relation(fields: [studentGuardianId], references: [id])
  studentGuardianId String?

  @@unique([firstName, lastName])
  @@index([studentEmail, personalEmail])
}

model UserRole {
  id        String    @id @default(uuid())
  userId    String
  role      Role      @default(MAHASISWA)
  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

//-------------------Klabat Bridge ----------------------//

model FormSPT {
  id                String    @id @default(uuid())
  nik               String    @unique
  birth_mother      String
  graduate_plan     String //semester berapa?
  minor             String?
  remaining_credits String // perhatikan kembali untuk sisa jumlah sks
  remaining_classes String
  approvalFak       status    @default(WAITING) // approved dan reject, default waiting
  approvalReg       status    @default(WAITING)
  created_at        DateTime  @default(now())
  updated_at        DateTime?
  student           Student   @relation(fields: [studentId], references: [nim])
  studentId         String
}

//-------------------Skripsi App ------------------------
model Thesis_Student {
  id                String     @id @default(uuid())
  student           Student    @relation("ThesisStudent", fields: [student_id], references: [id])
  student_id        String     @unique
  proposal_class    Classroom  @relation("ProposalClassroom", fields: [proposal_class_id], references: [id])
  proposal_class_id String
  skripsi_class     Classroom? @relation("SkripsiClassroom", fields: [skripsi_class_id], references: [id])
  skripsi_class_id  String?
}

model Group_Student {
  id         String  @id @default(uuid())
  group      Group   @relation("Group", fields: [group_id], references: [id])
  group_id   String
  student    Student @relation("StudentMember", fields: [student_id], references: [id])
  student_id String
}

model Group {
  id            String          @id @default(uuid())
  progress      Progress?
  title         String?
  keywords      String?
  abstrak       String?
  reference     String?
  submission    Submission      @relation("Submission", fields: [submission_id], references: [id])
  submission_id String          @unique
  proposal      Proposal?       @relation("Proposal", fields: [proposal_id], references: [id])
  proposal_id   String?         @unique
  skripsi       Skripsi?        @relation("Skripsi", fields: [skripsi_id], references: [id])
  skripsi_id    String?         @unique
  created_at    DateTime        @default(now())
  updated_at    DateTime?
  group_student Group_Student[] @relation("Group")
  consultation  Consultaion[]   @relation("Consultation")
  History       History[]       @relation("History")
}

model Academic_Calendar {
  id        String      @id @default(uuid())
  semester  Semester
  year      String
  classroom Classroom[] @relation("Academic")
}

model Classroom {
  id               String            @id @default(uuid())
  dosen_mk         Employee          @relation("DosenMK", fields: [dosen_mk_id], references: [id])
  dosen_mk_id      String
  academic         Academic_Calendar @relation("Academic", fields: [academic_id], references: [id])
  academic_id      String
  name             Classroom_Name
  proposal_student Thesis_Student[]  @relation("ProposalClassroom")
  skripsi_student  Thesis_Student[]  @relation("SkripsiClassroom")
  submission       Submission[]      @relation("SubmissionClassroom")
  proposal         Proposal[]        @relation("ProposalClassroom")
  skripsi          Skripsi[]         @relation("SkripsiClassroom")
}

model Submission {
  id                      String             @id @default(uuid())
  file_name               String
  upload_date             DateTime
  file_size               String
  is_consultation         Boolean
  proposed_advisor        Employee           @relation("ProposedAdvisor", fields: [proposed_advisor_id], references: [id])
  proposed_advisor_id     String
  proposed_co_advisor1    Employee?          @relation("ProposedCoAdvisor1", fields: [proposed_co_advisor1_id], references: [id])
  proposed_co_advisor1_id String?
  proposed_co_advisor2    Employee?          @relation("ProposedCoAdvisor2", fields: [proposed_co_advisor2_id], references: [id])
  proposed_co_advisor2_id String?
  is_approve              Submission_Approve @default(Waiting)
  classroom               Classroom          @relation("SubmissionClassroom", fields: [classroom_id], references: [id])
  classroom_id            String
  created_at              DateTime           @default(now())
  updated_at              DateTime?
  group                   Group?             @relation("Submission")
}

model Proposal {
  id                                       String                @id @default(uuid())
  file_name_proposal                       String?
  file_name_payment                        String?
  file_name_plagiarismcheck                String?
  upload_date_proposal                     DateTime?
  upload_date_payment                      DateTime?
  upload_date_plagiarismcheck              DateTime?
  file_size_proposal                       String?
  file_size_payment                        String?
  file_size_plagiarismcheck                String?
  advisor                                  Employee              @relation("ProposalAdvisor", fields: [advisor_id], references: [id])
  advisor_id                               String
  co_advisor1                              Employee?             @relation("ProposalCoAdvisor1", fields: [co_advisor1_id], references: [id])
  co_advisor1_id                           String?
  co_advisor2                              Employee?             @relation("ProposalCoAdvisor2", fields: [co_advisor2_id], references: [id])
  co_advisor2_id                           String?
  classroom                                Classroom             @relation("ProposalClassroom", fields: [classroom_id], references: [id])
  classroom_id                             String
  is_proposal_approve_by_advisor           Thesis_Approve?
  is_proposal_approve_by_co_advisor1       Thesis_Approve?
  is_proposal_approve_by_co_advisor2       Thesis_Approve?
  advisor_proposal_approved_date           DateTime?
  co_advisor1_proposal_approved_date       DateTime?
  co_advisor2_proposal_approved_date       DateTime?
  panelist_chairman                        Employee?             @relation("ProposalPanelistChairman", fields: [panelist_chairman_id], references: [id])
  panelist_chairman_id                     String?
  panelist_member                          Employee?             @relation("ProposalPanelistMember", fields: [panelist_member_id], references: [id])
  panelist_member_id                       String?
  start_defence                            String?
  end_defence                              String?
  defence_room                             String?
  defence_date                             String?
  is_report_open                           Boolean               @default(false)
  is_report_approve_by_dekan               Boolean?
  is_report_approve_by_panelist_chairman   Boolean?
  is_report_approve_by_panelist_member     Boolean?
  is_report_approve_by_advisor             Boolean?
  exam_conclution                          Exam_Conclution?
  changes_conclusion                       Changes_Conclusion?
  assessment_conclution                    String?
  is_pass                                  Pass?
  report_date                              String?
  file_name_revision                       String?
  upload_date_revision                     DateTime?
  file_size_revision                       String?
  is_revision_approve_by_panelist_chairman Revision_Approve?
  is_revision_approve_by_panelist_member   Revision_Approve?
  is_revision_approve_by_advisor           Revision_Approve?
  panelist_chairman_revision_approve_date  DateTime?
  panelist_member_revision_approve_date    DateTime?
  advisor_revision_approve_date            DateTime?
  group                                    Group?                @relation("Proposal")
  assessment                               Proposal_Assessment[] @relation("Assessment")
  changes                                  Proposal_Changes[]    @relation("Changes")
}

model Skripsi {
  id                                       String               @id @default(uuid())
  file_name_skripsi                        String?
  file_name_payment                        String?
  file_name_plagiarismcheck                String?
  upload_date_skripsi                      DateTime?
  upload_date_payment                      DateTime?
  upload_date_plagiarismcheck              DateTime?
  file_size_skripsi                        String?
  file_size_payment                        String?
  file_size_plagiarismcheck                String?
  advisor                                  Employee             @relation("SkripsiAdvisor", fields: [advisor_id], references: [id])
  advisor_id                               String
  co_advisor1                              Employee?            @relation("SkripsiCoAdvisor1", fields: [co_advisor1_id], references: [id])
  co_advisor1_id                           String?
  co_advisor2                              Employee?            @relation("SkripsiCoAdvisor2", fields: [co_advisor2_id], references: [id])
  co_advisor2_id                           String?
  classroom                                Classroom?           @relation("SkripsiClassroom", fields: [classroom_id], references: [id])
  classroom_id                             String?
  is_skripsi_approve_by_advisor            Thesis_Approve?
  is_skripsi_approve_by_co_advisor1        Thesis_Approve?
  is_skripsi_approve_by_co_advisor2        Thesis_Approve?
  advisor_skripsi_approved_date            DateTime?
  co_advisor1_skripsi_approved_date        DateTime?
  co_advisor2_skripsi_approved_date        DateTime?
  panelist_chairman                        Employee?            @relation("SkripsiPanelistChairman", fields: [panelist_chairman_id], references: [id])
  panelist_chairman_id                     String?
  panelist_member                          Employee?            @relation("SkripsiPanelistMember", fields: [panelist_member_id], references: [id])
  panelist_member_id                       String?
  start_defence                            String?
  end_defence                              String?
  defence_room                             String?
  defence_date                             String?
  is_report_open                           Boolean              @default(false)
  is_report_approve_by_dekan               Boolean?
  is_report_approve_by_panelist_chairman   Boolean?
  is_report_approve_by_panelist_member     Boolean?
  is_report_approve_by_advisor             Boolean?
  exam_conclution                          Exam_Conclution?
  changes_conclusion                       Changes_Conclusion?
  assessment_conclution                    String?
  is_pass                                  Pass?
  report_date                              String?
  file_name_revision                       String?
  upload_date_revision                     DateTime?
  file_size_revision                       String?
  is_revision_approve_by_panelist_chairman Revision_Approve?
  is_revision_approve_by_panelist_member   Revision_Approve?
  is_revision_approve_by_advisor           Revision_Approve?
  panelist_chairman_revision_approve_date  DateTime?
  panelist_member_revision_approve_date    DateTime?
  advisor_revision_approve_date            DateTime?
  file_name_hki                            String?
  file_name_journal                        String?
  file_name_sourcecode                     String?
  file_name_poster                         String?
  file_name_tutorial                       String?
  upload_date_hki                          DateTime?
  upload_date_journal                      DateTime?
  upload_date_sourcecode                   DateTime?
  upload_date_poster                       DateTime?
  upload_date_tutorial                     DateTime?
  file_size_hki                            String?
  file_size_journal                        String?
  file_size_sourcecode                     String?
  link_soucecode                           String?
  file_size_poster                         String?
  file_size_tutorial                       String?
  group                                    Group?               @relation("Skripsi")
  assessment                               Skripsi_Assessment[] @relation("Assessment")
  changes                                  Skripsi_Changes[]    @relation("Changes")
}

model Proposal_Assessment {
  id          String   @id @default(uuid())
  proposal    Proposal @relation("Assessment", fields: [proposal_id], references: [id])
  proposal_id String
  student     Student  @relation("Student", fields: [student_id], references: [id])
  student_id  String
  dosen       Employee @relation("Dosen", fields: [dosen_id], references: [id])
  dosen_id    String
  value       String
}

model Skripsi_Assessment {
  id         String   @id @default(uuid())
  skripsi    Skripsi  @relation("Assessment", fields: [skripsi_id], references: [id])
  skripsi_id String
  student    Student  @relation("Student", fields: [student_id], references: [id])
  student_id String
  dosen      Employee @relation("Dosen", fields: [dosen_id], references: [id])
  dosen_id   String
  value      String
}

model Proposal_Changes {
  id          String   @id @default(uuid())
  proposal    Proposal @relation("Changes", fields: [proposal_id], references: [id])
  proposal_id String
  dosen       Employee @relation("Dosen", fields: [dosen_id], references: [id])
  dosen_id    String
  changes     String
}

model Skripsi_Changes {
  id         String   @id @default(uuid())
  skripsi    Skripsi  @relation("Changes", fields: [skripsi_id], references: [id])
  skripsi_id String
  dosen      Employee @relation("Dosen", fields: [dosen_id], references: [id])
  dosen_id   String
  changes    String
}

model Consultaion {
  id          String   @id @default(uuid())
  group       Group    @relation("Consultation", fields: [group_id], references: [id])
  group_id    String
  description String
  date        DateTime
  dosen       Employee @relation("Consultation", fields: [dosen_id], references: [id])
  dosen_id    String
}

model History {
  id          String   @id @default(uuid())
  user_id     String
  description String
  date        DateTime
  group       Group    @relation("History", fields: [group_id], references: [id])
  group_id    String
}

//-------------------Bimbingan Akademik-------------------/

model StudentGuardian {
  id             String    @id @default(uuid())
  firstName      String
  lastName       String
  edicationLevel String
  religion       String
  familyRelation String
  email          String
  phoneNo        String
  address        String
  student        Student[]
}

model Subject {
  id           String            @id @default(uuid())
  sub_code     String
  sub_name     String
  grade        String
  Type         String
  preRequisite String
  Status       String
  preRegis     PreRegistration[]
}

model PreRegistration {
  id          String            @id @default(uuid())
  submitDate  DateTime          @default(now())
  approveDate DateTime?
  status      String
  description String
  comments    String
  history     HistoryAcademic[]
  Subject     Subject?          @relation(fields: [subjectId], references: [id])
  subjectId   String?
  Employee    Employee?         @relation(fields: [employeeId], references: [id])
  employeeId  String?
  Student     Student?          @relation(fields: [studentId], references: [id])
  studentId   String?
}

model Consultation {
  id         String            @id @default(uuid())
  topic      String
  submitDate DateTime
  status     String
  message    Message[]
  history    HistoryAcademic[]
  Dosen      Employee?         @relation("supervisior", fields: [DosenId], references: [id])
  DosenId    String?
  Employee   Employee?         @relation("consultationRecivier", fields: [employeeId], references: [id])
  employeeId String?
  Student    Student?          @relation(fields: [studentId], references: [id])
  studentId  String?
}

model Message {
  id             String        @id @default(uuid())
  Consultation   Consultation? @relation(fields: [consultationId], references: [id])
  consultationId String?
  sendTime       DateTime      @default(now())
  Student        Student?      @relation(fields: [studentId], references: [id])
  studentId      String?
  Employee       Employee?     @relation(fields: [employeeId], references: [id])
  employeeId     String?
}

model Certificate {
  id          String            @id @default(uuid())
  filename    String
  path        String
  title       String
  category    String
  description String
  submitDate  DateTime          @default(now())
  status      status            @default(WAITING)
  transaction Transaction[]
  history     HistoryAcademic[]
}

model Activity {
  id          String            @id @default(uuid())
  title       String
  description String
  date        DateTime
  time        String
  transaction Transaction[]
  history     HistoryAcademic[]
}

model Transaction {
  id            String       @id @default(uuid())
  Certificate   Certificate? @relation(fields: [certificateId], references: [id])
  certificateId String?
  Activity      Activity?    @relation(fields: [activityId], references: [id])
  activityId    String?
  Student       Student?     @relation(fields: [studentId], references: [nim])
  studentId     String?
  Employee      Employee?    @relation(fields: [employeeId], references: [nik])
  employeeId    String?
}

model HistoryAcademic {
  id                String           @id @default(uuid())
  PreRegistration   PreRegistration? @relation(fields: [preRegistrationId], references: [id])
  preRegistrationId String?
  Consultation      Consultation?    @relation(fields: [consultationId], references: [id])
  consultationId    String?
  Certificate       Certificate?     @relation(fields: [certificateId], references: [id])
  certificateId     String?
  Activity          Activity?        @relation(fields: [activityId], references: [id])
  activityId        String?
}

enum Major {
  SI
  IF
}

enum StudentStatus {
  GRADUATE
  ACTIVE
  INACTIVE
}

enum gender {
  MALE
  FEMALE
}

enum Thesis_Approve {
  Waiting
  Approve
  Rejected
}

enum Submission_Approve {
  Waiting
  Approve
  Rejected
}

enum Classroom_Name {
  Proposal
  Skripsi
}

enum Semester {
  Ganjil
  Genap
  Padat
}

enum Progress {
  Submission
  Proposal
  Skripsi
  Finished
}

enum status {
  WAITING
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  SUPER_ADMIN
  MAHASISWA
  ADMIN_LPMI
  OPERATOR_LPMI
  ALUMNI
  DEKAN
  KAPRODI
  DOSEN
  DOSEN_MK
  OPERATOR_FAKULTAS
  SEKRETARIS
}

enum Exam_Conclution {
  Rejected
  Approve
}

enum Changes_Conclusion {
  Major
  Minor
}

enum Pass {
  Pass
  Fail
  Repeat
}

enum Revision_Approve {
  Waiting
  Approve
  Rejected
}
