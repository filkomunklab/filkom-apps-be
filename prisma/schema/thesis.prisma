//-------------------Skripsi App ------------------------
model Proposal_Student {
    id           String    @id @default(uuid())
    student      Student   @relation("ProposalStudent", fields: [student_id], references: [id])
    student_id   String
    classroom    Classroom @relation("ProposalClassroom", fields: [classroom_id], references: [id])
    classroom_id String
}

model Skripsi_Student {
    id           String     @id @default(uuid())
    student      Student    @relation("SkripsiStudent", fields: [student_id], references: [id])
    student_id   String
    classroom    Classroom? @relation("SkripsiClassroom", fields: [classroom_id], references: [id])
    classroom_id String?
}

model Group_Student {
    id         String  @id @default(uuid())
    group      Group   @relation("Group", fields: [group_id], references: [id])
    group_id   String
    student    Student @relation("StudentMember", fields: [student_id], references: [id])
    student_id String
}

model Group {
    id                  String                @id @default(uuid())
    progress            Progress?
    title               String?
    keywords            String?
    abstrak             String?
    reference           String?
    submission          Submission?           @relation("Submission", fields: [submission_id], references: [id])
    submission_id       String?               @unique
    proposal            Proposal?             @relation("Proposal", fields: [proposal_id], references: [id])
    proposal_id         String?               @unique
    skripsi             Skripsi?              @relation("Skripsi", fields: [skripsi_id], references: [id])
    skripsi_id          String?               @unique
    created_at          DateTime              @default(now())
    updated_at          DateTime?
    group_student       Group_Student[]       @relation("Group")
    thesis_consultation Thesis_Consultation[] @relation("ThesisConsultation")
    History             Thesis_History[]      @relation("History")
    Link                Thesis_Link[]         @relation("Link")
}

model Academic_Calendar {
    id        String      @id @default(uuid())
    semester  Semester
    year      String
    classroom Classroom[] @relation("Academic")
}

model Classroom {
    id               String             @id @default(uuid())
    dosen_mk         Employee           @relation("DosenMK", fields: [dosen_mk_id], references: [id])
    dosen_mk_id      String
    academic         Academic_Calendar  @relation("Academic", fields: [academic_id], references: [id])
    academic_id      String
    name             Classroom_Name
    proposal_student Proposal_Student[] @relation("ProposalClassroom")
    skripsi_student  Skripsi_Student[]  @relation("SkripsiClassroom")
    submission       Submission[]       @relation("SubmissionClassroom")
    proposal         Proposal[]         @relation("ProposalClassroom")
    skripsi          Skripsi[]          @relation("SkripsiClassroom")
}

model Submission {
    id                      String             @id @default(uuid())
    file_name               String
    upload_date             DateTime
    file_size               String
    file_path               String
    is_consultation         Boolean
    proposed_advisor        Employee           @relation("ProposedAdvisor", fields: [proposed_advisor_id], references: [id])
    proposed_advisor_id     String
    proposed_co_advisor1    Employee?          @relation("ProposedCoAdvisor1", fields: [proposed_co_advisor1_id], references: [id])
    proposed_co_advisor1_id String?
    proposed_co_advisor2    Employee?          @relation("ProposedCoAdvisor2", fields: [proposed_co_advisor2_id], references: [id])
    proposed_co_advisor2_id String?
    is_approve              Submission_Approve @default(Waiting)
    classroom               Classroom          @relation("SubmissionClassroom", fields: [classroom_id], references: [id])
    classroom_id            String
    created_at              DateTime           @default(now())
    updated_at              DateTime?
    group                   Group?             @relation("Submission")
}

model Proposal {
    id                                       String                @id @default(uuid())
    file_name_proposal                       String?
    file_name_payment                        String?
    file_name_plagiarismcheck                String?
    upload_date_proposal                     DateTime?
    upload_date_payment                      DateTime?
    upload_date_plagiarismcheck              DateTime?
    file_size_proposal                       String?
    file_size_payment                        String?
    file_size_plagiarismcheck                String?
    file_path_proposal                       String?
    file_path_payment                        String?
    file_path_plagiarismcheck                String?
    advisor                                  Employee              @relation("ProposalAdvisor", fields: [advisor_id], references: [id])
    advisor_id                               String
    co_advisor1                              Employee?             @relation("ProposalCoAdvisor1", fields: [co_advisor1_id], references: [id])
    co_advisor1_id                           String?
    co_advisor2                              Employee?             @relation("ProposalCoAdvisor2", fields: [co_advisor2_id], references: [id])
    co_advisor2_id                           String?
    classroom                                Classroom             @relation("ProposalClassroom", fields: [classroom_id], references: [id])
    classroom_id                             String
    is_proposal_approve_by_advisor           Thesis_Approve?
    is_proposal_approve_by_co_advisor1       Thesis_Approve?
    is_proposal_approve_by_co_advisor2       Thesis_Approve?
    advisor_proposal_approved_date           DateTime?
    co_advisor1_proposal_approved_date       DateTime?
    co_advisor2_proposal_approved_date       DateTime?
    panelist_chairman                        Employee?             @relation("ProposalPanelistChairman", fields: [panelist_chairman_id], references: [id])
    panelist_chairman_id                     String?
    panelist_member                          Employee?             @relation("ProposalPanelistMember", fields: [panelist_member_id], references: [id])
    panelist_member_id                       String?
    start_defence                            String?
    end_defence                              String?
    defence_room                             String?
    defence_date                             String?
    is_report_open                           Boolean?
    is_report_approve_by_dekan               Boolean?
    is_report_approve_by_panelist_chairman   Boolean?
    is_report_approve_by_panelist_member     Boolean?
    is_report_approve_by_advisor             Boolean?
    dekan_report_approve_date                DateTime?
    panelist_chairman_report_approve_date    DateTime?
    panelist_member_report_approve_date      DateTime?
    advisor_report_approve_date              DateTime?
    exam_conclution                          Exam_Conclution?
    changes_conclusion                       Changes_Conclusion?
    is_pass                                  Pass?
    report_date                              String?
    file_name_revision                       String?
    upload_date_revision                     DateTime?
    file_size_revision                       String?
    file_path_revision                       String?
    is_revision_approve_by_panelist_chairman Revision_Approve?
    is_revision_approve_by_panelist_member   Revision_Approve?
    is_revision_approve_by_advisor           Revision_Approve?
    panelist_chairman_revision_approve_date  DateTime?
    panelist_member_revision_approve_date    DateTime?
    advisor_revision_approve_date            DateTime?
    panelist_chairman_revision_comment       String?
    panelist_member_revision_comment         String?
    advisor_revision_comment                 String?
    submission_dateline                      DateTime?
    completed_status                         Boolean?
    approve_date                             DateTime?
    group                                    Group?                @relation("Proposal")
    assessment                               Proposal_Assessment[] @relation("Assessment")
    changes                                  Proposal_Changes[]    @relation("Changes")
    conclusion_value                         Proposal_Conclusion[] @relation("Conclusion_Value")
}

model Skripsi {
    id                                       String               @id @default(uuid())
    file_name_skripsi                        String?
    file_name_payment                        String?
    file_name_plagiarismcheck                String?
    upload_date_skripsi                      DateTime?
    upload_date_payment                      DateTime?
    upload_date_plagiarismcheck              DateTime?
    file_size_skripsi                        String?
    file_size_payment                        String?
    file_size_plagiarismcheck                String?
    file_path_skripsi                        String?
    file_path_payment                        String?
    file_path_plagiarismcheck                String?
    advisor                                  Employee             @relation("SkripsiAdvisor", fields: [advisor_id], references: [id])
    advisor_id                               String
    co_advisor1                              Employee?            @relation("SkripsiCoAdvisor1", fields: [co_advisor1_id], references: [id])
    co_advisor1_id                           String?
    co_advisor2                              Employee?            @relation("SkripsiCoAdvisor2", fields: [co_advisor2_id], references: [id])
    co_advisor2_id                           String?
    classroom                                Classroom?           @relation("SkripsiClassroom", fields: [classroom_id], references: [id])
    classroom_id                             String?
    is_skripsi_approve_by_advisor            Thesis_Approve?
    is_skripsi_approve_by_co_advisor1        Thesis_Approve?
    is_skripsi_approve_by_co_advisor2        Thesis_Approve?
    advisor_skripsi_approved_date            DateTime?
    co_advisor1_skripsi_approved_date        DateTime?
    co_advisor2_skripsi_approved_date        DateTime?
    panelist_chairman                        Employee?            @relation("SkripsiPanelistChairman", fields: [panelist_chairman_id], references: [id])
    panelist_chairman_id                     String?
    panelist_member                          Employee?            @relation("SkripsiPanelistMember", fields: [panelist_member_id], references: [id])
    panelist_member_id                       String?
    start_defence                            String?
    end_defence                              String?
    defence_room                             String?
    defence_date                             String?
    is_report_open                           Boolean?
    is_report_approve_by_dekan               Boolean?
    is_report_approve_by_panelist_chairman   Boolean?
    is_report_approve_by_panelist_member     Boolean?
    is_report_approve_by_advisor             Boolean?
    dekan_report_approve_date                DateTime?
    panelist_chairman_report_approve_date    DateTime?
    panelist_member_report_approve_date      DateTime?
    advisor_report_approve_date              DateTime?
    exam_conclution                          Exam_Conclution?
    changes_conclusion                       Changes_Conclusion?
    is_pass                                  Pass?
    report_date                              String?
    file_name_revision                       String?
    upload_date_revision                     DateTime?
    file_size_revision                       String?
    file_path_revision                       String?
    is_revision_approve_by_panelist_chairman Revision_Approve?
    is_revision_approve_by_panelist_member   Revision_Approve?
    is_revision_approve_by_advisor           Revision_Approve?
    panelist_chairman_revision_approve_date  DateTime?
    panelist_member_revision_approve_date    DateTime?
    advisor_revision_approve_date            DateTime?
    panelist_chairman_revision_comment       String?
    panelist_member_revision_comment         String?
    advisor_revision_comment                 String?
    submission_dateline                      DateTime?
    completed_status                         Boolean?
    approve_date                             DateTime?
    file_name_hki                            String?
    file_name_journal                        String?
    file_name_sourcecode                     String?
    upload_date_hki                          DateTime?
    upload_date_journal                      DateTime?
    upload_date_sourcecode                   DateTime?
    file_size_hki                            String?
    file_size_journal                        String?
    file_size_sourcecode                     String?
    link_soucecode                           String?
    upload_date_link_soucecode               DateTime?
    file_path_hki                            String?
    file_path_journal                        String?
    file_path_sourcecode                     String?
    group                                    Group?               @relation("Skripsi")
    assessment                               Skripsi_Assessment[] @relation("Assessment")
    changes                                  Skripsi_Changes[]    @relation("Changes")
    conclusion_value                         Skripsi_Conclusion[] @relation("Conclusion_Value")
}

model Proposal_Assessment {
    id          String   @id @default(uuid())
    proposal    Proposal @relation("Assessment", fields: [proposal_id], references: [id])
    proposal_id String
    student     Student  @relation("Student", fields: [student_id], references: [id], onDelete: Cascade)
    student_id  String
    dosen       Employee @relation("Dosen", fields: [dosen_id], references: [id])
    dosen_id    String
    value       String?
}

model Skripsi_Assessment {
    id         String   @id @default(uuid())
    skripsi    Skripsi  @relation("Assessment", fields: [skripsi_id], references: [id])
    skripsi_id String
    student    Student  @relation("Student", fields: [student_id], references: [id], onDelete: Cascade)
    student_id String
    dosen      Employee @relation("Dosen", fields: [dosen_id], references: [id])
    dosen_id   String
    value      String?
}

model Proposal_Changes {
    id          String   @id @default(uuid())
    proposal    Proposal @relation("Changes", fields: [proposal_id], references: [id])
    proposal_id String
    dosen       Employee @relation("Dosen", fields: [dosen_id], references: [id])
    dosen_id    String
    judul       String?
    bab1        String?
    bab2        String?
    bab3        String?
    other       String?
}

model Skripsi_Changes {
    id         String   @id @default(uuid())
    skripsi    Skripsi  @relation("Changes", fields: [skripsi_id], references: [id])
    skripsi_id String
    dosen      Employee @relation("Dosen", fields: [dosen_id], references: [id])
    dosen_id   String
    changes    String?
    abstrak    String?
    bab1       String?
    bab2       String?
    bab3       String?
    bab4       String?
    bab5       String?
    other      String?
}

model Proposal_Conclusion {
    id                    String   @id @default(uuid())
    proposal              Proposal @relation("Conclusion_Value", fields: [proposal_id], references: [id])
    proposal_id           String
    student               Student  @relation("Student", fields: [student_id], references: [id], onDelete: Cascade)
    student_id            String
    assessment_conclution String?
}

model Skripsi_Conclusion {
    id                    String  @id @default(uuid())
    skripsi               Skripsi @relation("Conclusion_Value", fields: [skripsi_id], references: [id])
    skripsi_id            String
    student               Student @relation("Student", fields: [student_id], references: [id], onDelete: Cascade)
    student_id            String
    assessment_conclution String?
}

model Thesis_Consultation {
    id                  String              @id @default(uuid())
    group               Group               @relation("ThesisConsultation", fields: [group_id], references: [id])
    group_id            String
    description         String
    date                DateTime
    dosen               Employee            @relation("ThesisConsultation", fields: [dosen_id], references: [id])
    dosen_id            String
    consultation_status Consultation_Status
}

model Thesis_History {
    id          String   @id @default(uuid())
    user_id     String
    description String
    date        DateTime
    group       Group    @relation("History", fields: [group_id], references: [id])
    group_id    String
}

model Thesis_Link {
    id       String   @id @default(uuid())
    group    Group    @relation("Link", fields: [group_id], references: [id])
    group_id String
    name     String
    link     String
    date     DateTime
}
